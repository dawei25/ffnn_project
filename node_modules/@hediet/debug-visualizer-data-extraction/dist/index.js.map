{"version":3,"sources":["../webpack/bootstrap",".././src/util.ts",".././src/js/helpers/index.ts",".././src/js/api/index.ts",".././src/js/api/injection.ts",".././src/js/api/DataExtractorApiImpl.ts",".././src/js/api/default-extractors/index.ts",".././src/DataExtractionResult.ts",".././src/js/helpers/createGraph.ts",".././src/index.ts",".././src/js/index.ts",".././src/js/api/default-extractors/registerDefaultDataExtractors.ts",".././src/js/api/default-extractors/TypeScriptDataExtractors.ts",".././src/js/api/default-extractors/AsIsDataExtractor.ts",".././src/js/api/default-extractors/GetDebugVisualizationDataExtractor.ts",".././src/js/api/default-extractors/ToStringExtractor.ts",".././src/js/api/default-extractors/PlotlyDataExtractor.ts",".././src/js/api/default-extractors/ObjectGraphExtractor.ts",".././src/js/helpers/createGraphFromPointers.ts",".././src/js/helpers/tryEval.ts",".././src/js/helpers/markedGrid.ts",".././src/js/helpers/cache.ts",".././src/js/helpers/asData.ts",".././src/js/helpers/find.ts",".././src/js/api/default-extractors/GridExtractor.ts",".././src/js/api/default-extractors/TableExtractor.ts",".././src/js/api/default-extractors/StringDiffExtractor.ts",".././src/js/api/default-extractors/InjectedExtractor.ts",".././src/js/global-helpers.ts","../external \"fs\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","data","DataExtractorApiImpl","readFileSync","__filename","encoding","selfContainedGetInitializedDataExtractorApi","toString","selfContainedIsDataExtractorApiInitialized","apiKey","undefined","window","global","api","Error","installHelpers","helpers","globalHelpers","globalObj","extractors","Map","JSON","stringify","extractor","this","set","id","e","registerExtractor","valueFn","evalFn","preferredDataExtractorId","variablesInScope","extractions","Array","extractionCollector","extraction","push","lastVariablesInScope","lastEvalFn","values","getExtractions","sort","a","b","priority","usedExtraction","toJson","kind","preferred","find","mapExtractor","extractData","extractionResult","usedExtractor","availableExtractors","map","preferExisting","registerDefaultExtractors","val","obj","every","roots","infoSelector","options","graph","nodes","edges","idCounter","ids","getId","item","_id","queue","dist","processed","Set","length","shift","has","add","nodeInfo","fromId","other","toId","fromId_","to","from","include","shouldPush","maxSize","size","getDataExtractorApi","TypeScriptAstDataExtractor","AsIsDataExtractor","GetVisualizationDataExtractor","ToStringDataExtractor","PlotlyDataExtractor","ObjectGraphExtractor","GridExtractor","TableDataExtractor","StringDiffExtractor","InjectedExtractor","collector","tsApi","typescript","require","helper","Helper","marked","rootSourceFile","rootNode","fn","isArray","isNode","getSourceFile","entries","finalRootSourceFile","addExtraction","expect","text","tree","ast","root","toTreeNode","fileName","node","isToken","parent","propertyName","startsWith","member","index","indexOf","result","forEachChild","memberName","segmentName","emphasizedValueFn","SyntaxKind","children","getChildren","childNode","idx","parentPropertyName","getPropertyNameInParent","SyntaxList","filter","isIdentifier","escapedText","isLiteralExpression","items","emphasis","emphasizedVal","segment","span","end","pos","start","isMarked","isSourceFile","context","isVisualizationData","getVisualizationData","apply","some","x","plotly","y","isObject","createGraph","label","constructor","shape","color","marker","arr","grid","rows","columns","content","tag","markers","row","column","cached","expression","resultFn","expr","predicate","top","table","type","otherText","injectedExtractorsFns"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","export function expect<T>(data: T): T {\n\treturn data;\n}\n","export * from \"./createGraph\";\nexport * from \"./createGraphFromPointers\";\nexport * from \"./tryEval\";\nexport * from \"./markedGrid\";\nexport * from \"./cache\";\nexport * from \"./asData\";\nexport * from \"./find\";\n","export * from \"./DataExtractorApi\";\nexport * from \"./injection\";\nexport { DataExtractorApiImpl } from \"./DataExtractorApiImpl\";\nexport * from \"./LoadDataExtractorsFn\";\n","import * as fs from \"fs\";\nimport { DataExtractorApi } from \"./DataExtractorApi\";\nimport { DataExtractorApiImpl } from \"./DataExtractorApiImpl\";\nimport * as helpers from \"../helpers\";\nimport * as globalHelpers from \"../global-helpers\";\n\n/**\n * Returns standalone JS code representing an expression that initializes the data extraction API.\n * This expression returns nothing.\n * This function is called in the VS Code extension, the expression is evaluated in the debugee.\n */\nexport function getExpressionToInitializeDataExtractorApi(): string {\n\tconst _fs = require(\"fs\") as typeof fs;\n\tconst moduleSrc = _fs.readFileSync(__filename, { encoding: \"utf8\" });\n\treturn `((function () {\n\t\tlet module = {};\n\t\t${moduleSrc}\n\t\treturn module.exports.getDataExtractorApi();\n\t})())`;\n}\n\n/**\n * Returns standalone JS code representing an expression that returns the data extraction API.\n * This expression returns an object of type `DataExtractorApi`.\n * This function is called in the VS Code extension, the expression is evaluated in the debugee.\n */\nexport function getExpressionForDataExtractorApi(): string {\n\treturn `((${selfContainedGetInitializedDataExtractorApi.toString()})())`;\n}\n\nexport function getExpressionToDetectDataExtractorApiPresence(): string {\n\treturn `((${selfContainedIsDataExtractorApiInitialized.toString()})())`;\n}\n\nconst apiKey = \"@hediet/data-extractor-api/v2\";\n\nexport function getDataExtractorApi(): DataExtractorApi {\n\tinstallHelpers();\n\tconst globalObj =\n\t\ttypeof window === \"object\" ? (window as any) : (global as any);\n\tif (!globalObj[apiKey]) {\n\t\tglobalObj[apiKey] = new DataExtractorApiImpl();\n\t}\n\treturn globalObj[apiKey];\n}\n\n/**\n * @internal\n */\nfunction selfContainedIsDataExtractorApiInitialized(): boolean {\n\tconst globalObj =\n\t\ttypeof window === \"object\" ? (window as any) : (global as any);\n\tconst key: typeof apiKey = \"@hediet/data-extractor-api/v2\";\n\tlet api: DataExtractorApi | undefined = globalObj[key];\n\treturn api !== undefined;\n}\n\n/**\n * @internal\n */\nfunction selfContainedGetInitializedDataExtractorApi(): DataExtractorApi {\n\tconst globalObj =\n\t\ttypeof window === \"object\" ? (window as any) : (global as any);\n\tconst key: typeof apiKey = \"@hediet/data-extractor-api/v2\";\n\tlet api: DataExtractorApi | undefined = globalObj[key];\n\tif (!api) {\n\t\tthrow new Error(`Data Extractor API has not been initialized.`);\n\t}\n\treturn api;\n}\n\nexport function installHelpers(): void {\n\tconst globalObj =\n\t\ttypeof window === \"object\" ? (window as any) : (global as any);\n\t// `hediet` as prefix to avoid name collision (I own `hediet.de`).\n\tglobalObj[\"hedietDbgVis\"] = { ...helpers, ...globalHelpers };\n}\n","import {\n\tDataExtractorApi,\n\tDataResult,\n\tJSONString,\n\tDataExtractor,\n\tDataExtraction,\n\tExtractionCollector,\n} from \"./DataExtractorApi\";\nimport { DataExtractorInfo } from \"../../DataExtractionResult\";\nimport { registerDefaultExtractors } from \"./default-extractors\";\n\n/**\n * @internal\n */\nexport class DataExtractorApiImpl implements DataExtractorApi {\n\tpublic static lastEvalFn: (<T>(expression: string) => T) | undefined;\n\tpublic static lastVariablesInScope:\n\t\t| Record<string, unknown>\n\t\t| undefined = undefined;\n\n\tprivate readonly extractors = new Map<string, DataExtractor>();\n\n\tprivate toJson<TData>(data: TData): JSONString<TData> {\n\t\treturn JSON.stringify(data) as any;\n\t}\n\n\tpublic registerExtractor(extractor: DataExtractor): void {\n\t\tthis.extractors.set(extractor.id, extractor);\n\t}\n\n\tpublic registerExtractors(extractors: DataExtractor[]): void {\n\t\tfor (const e of extractors) {\n\t\t\tthis.registerExtractor(e);\n\t\t}\n\t}\n\n\tpublic getData(\n\t\tvalueFn: () => unknown,\n\t\tevalFn: <T>(expression: string) => T,\n\t\tpreferredDataExtractorId: string | undefined,\n\t\tvariablesInScope: Record<string, unknown>\n\t): JSONString<DataResult> {\n\t\tconst extractions = new Array<DataExtraction>();\n\t\tconst extractionCollector: ExtractionCollector = {\n\t\t\taddExtraction(extraction) {\n\t\t\t\textractions.push(extraction);\n\t\t\t},\n\t\t};\n\n\t\tDataExtractorApiImpl.lastVariablesInScope = variablesInScope;\n\t\tDataExtractorApiImpl.lastEvalFn = evalFn;\n\t\tconst value = valueFn();\n\n\t\tfor (const e of this.extractors.values()) {\n\t\t\te.getExtractions(value, extractionCollector, {\n\t\t\t\tevalFn,\n\t\t\t\tvariablesInScope,\n\t\t\t});\n\t\t}\n\n\t\tDataExtractorApiImpl.lastVariablesInScope = undefined;\n\t\tDataExtractorApiImpl.lastEvalFn = undefined;\n\n\t\textractions.sort((a, b) => b.priority - a.priority);\n\t\tlet usedExtraction = extractions[0];\n\t\tif (!usedExtraction) {\n\t\t\treturn this.toJson({ kind: \"NoExtractors\" } as DataResult);\n\t\t}\n\n\t\tif (preferredDataExtractorId) {\n\t\t\tconst preferred = extractions.find(\n\t\t\t\te => e.id === preferredDataExtractorId\n\t\t\t);\n\t\t\tif (preferred) {\n\t\t\t\tusedExtraction = preferred;\n\t\t\t}\n\t\t}\n\n\t\tfunction mapExtractor(e: DataExtraction): DataExtractorInfo {\n\t\t\treturn {\n\t\t\t\tid: e.id as any,\n\t\t\t\tname: e.name,\n\t\t\t\tpriority: e.priority,\n\t\t\t};\n\t\t}\n\n\t\tconst data = usedExtraction.extractData();\n\t\treturn this.toJson({\n\t\t\tkind: \"Data\",\n\t\t\textractionResult: {\n\t\t\t\tdata,\n\t\t\t\tusedExtractor: mapExtractor(usedExtraction),\n\t\t\t\tavailableExtractors: extractions.map(mapExtractor),\n\t\t\t},\n\t\t} as DataResult);\n\t}\n\n\tpublic registerDefaultExtractors(preferExisting: boolean = false): void {\n\t\t// TODO consider preferExisting\n\t\tregisterDefaultExtractors(this);\n\t}\n}\n","export { registerDefaultExtractors } from \"./registerDefaultDataExtractors\";\n","export interface DataExtractionResult {\n\tdata: VisualizationData;\n\tusedExtractor: DataExtractorInfo;\n\tavailableExtractors: DataExtractorInfo[];\n}\n\n/**\n * Instances must be valid json values.\n */\nexport interface VisualizationData {\n\tkind: Record<string, true>;\n}\n\nexport interface DataExtractorInfo {\n\tid: DataExtractorId;\n\tname: string;\n\tpriority: number;\n}\n\nexport type DataExtractorId = {\n\t__brand: \"DataExtractorId\";\n} & string;\n\nexport function isVisualizationData(val: unknown): val is VisualizationData {\n\tif (typeof val !== \"object\" || !val || !(\"kind\" in val)) {\n\t\treturn false;\n\t}\n\n\tconst obj = val as any;\n\tif (typeof obj.kind !== \"object\" || !obj.kind) {\n\t\treturn false;\n\t}\n\n\treturn Object.values(obj.kind).every(val => val === true);\n}\n","import {\n\tGraphEdge,\n\tGraphNode,\n\tGraphVisualizationData,\n} from \"../../CommonDataTypes\";\n\nexport type CreateGraphEdge<T> = ({ to: T } | { from: T } | { include: T }) &\n\tOmit<GraphEdge, \"from\" | \"to\">;\n\n/**\n * Given a list of roots, it creates a graph by following their edges recursively.\n * Tracks cycles.\n */\nexport function createGraph<T>(\n\troots: T[],\n\tinfoSelector: (\n\t\titem: T\n\t) => {\n\t\tid?: string | number;\n\t\tedges: CreateGraphEdge<T>[];\n\t} & Omit<GraphNode, \"id\">,\n\toptions: { maxSize?: number } = {}\n): GraphVisualizationData {\n\tconst r: GraphVisualizationData = {\n\t\tkind: {\n\t\t\tgraph: true,\n\t\t},\n\t\tnodes: [],\n\t\tedges: [],\n\t};\n\tlet idCounter = 1;\n\tconst ids = new Map<T, string>();\n\tfunction getId(item: T): string {\n\t\tconst _id = infoSelector(item).id;\n\t\tif (_id !== undefined) {\n\t\t\treturn \"\" + _id;\n\t\t}\n\n\t\tlet id = ids.get(item);\n\t\tif (!id) {\n\t\t\tid = `hediet.de/id-${idCounter++}`;\n\t\t\tids.set(item, id);\n\t\t}\n\t\treturn id;\n\t}\n\n\tconst queue = new Array<{ item: T; dist: number }>(\n\t\t...roots.map(r => ({ item: r, dist: 0 }))\n\t);\n\tconst processed = new Set<T>();\n\n\twhile (queue.length > 0) {\n\t\tconst { item, dist } = queue.shift()!;\n\t\tif (processed.has(item)) {\n\t\t\tcontinue;\n\t\t}\n\t\tprocessed.add(item);\n\t\tconst nodeInfo = infoSelector(item);\n\t\tconst fromId = getId(item);\n\t\tr.nodes.push({ ...nodeInfo, id: fromId, [\"edges\" as any]: undefined });\n\t\tfor (const e of nodeInfo.edges) {\n\t\t\tlet other: T;\n\t\t\tlet toId: string | undefined;\n\t\t\tlet fromId_: string | undefined;\n\t\t\tif (\"to\" in e) {\n\t\t\t\tother = e.to;\n\t\t\t\ttoId = getId(e.to);\n\t\t\t\tfromId_ = fromId;\n\t\t\t} else if (\"from\" in e) {\n\t\t\t\tother = e.from;\n\t\t\t\ttoId = getId(e.from);\n\t\t\t\tfromId_ = fromId;\n\t\t\t} else if (\"include\" in e) {\n\t\t\t\tother = e.include;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Every edge must either have 'to' or 'from'\");\n\t\t\t}\n\n\t\t\tif (fromId_ !== undefined && toId !== undefined) {\n\t\t\t\tr.edges.push({\n\t\t\t\t\t...e,\n\t\t\t\t\tfrom: fromId_,\n\t\t\t\t\tto: toId,\n\t\t\t\t});\n\t\t\t}\n\t\t\tlet shouldPush = !processed.has(other);\n\t\t\tif (\n\t\t\t\toptions.maxSize &&\n\t\t\t\tprocessed.size + queue.length > options.maxSize\n\t\t\t) {\n\t\t\t\tshouldPush = false;\n\t\t\t}\n\t\t\tif (shouldPush) {\n\t\t\t\tqueue.push({ item: other, dist: dist + 1 });\n\t\t\t}\n\t\t}\n\t}\n\treturn r;\n}\n","export * from \"./js\";\nexport * from \"./CommonDataTypes\";\nexport * from \"./DataExtractionResult\";\n","export * from \"./api\";\nexport * from \"./helpers\";\nexport { registerDefaultExtractors } from \"./api/default-extractors\";\n","import { DataExtractorApi } from \"../DataExtractorApi\";\nimport { TypeScriptAstDataExtractor } from \"./TypeScriptDataExtractors\";\nimport { AsIsDataExtractor } from \"./AsIsDataExtractor\";\nimport { GetVisualizationDataExtractor } from \"./GetDebugVisualizationDataExtractor\";\nimport { ToStringDataExtractor } from \"./ToStringExtractor\";\nimport { PlotlyDataExtractor } from \"./PlotlyDataExtractor\";\nimport { ObjectGraphExtractor } from \"./ObjectGraphExtractor\";\nimport { getDataExtractorApi } from \"../injection\";\nimport { GridExtractor } from \"./GridExtractor\";\nimport { TableDataExtractor } from \"./TableExtractor\";\nimport { StringDiffExtractor } from \"./StringDiffExtractor\";\nimport { InjectedExtractor } from \"./InjectedExtractor\";\n\n/**\n * The default data extractors should be registered by VS Code automatically.\n * Registering them manually ensures that they are up to date.\n */\nexport function registerDefaultExtractors(\n\tapi: DataExtractorApi = getDataExtractorApi()\n) {\n\tfor (const item of [\n\t\tnew TypeScriptAstDataExtractor(),\n\t\tnew AsIsDataExtractor(),\n\t\tnew GetVisualizationDataExtractor(),\n\t\tnew ToStringDataExtractor(),\n\t\tnew PlotlyDataExtractor(),\n\t\tnew ObjectGraphExtractor(),\n\t\tnew GridExtractor(),\n\t\tnew TableDataExtractor(),\n\t\tnew StringDiffExtractor(),\n\t\tnew InjectedExtractor(),\n\t]) {\n\t\tapi.registerExtractor(item);\n\t}\n}\n","import * as ts from \"typescript\"; // Only compile-time import!\nimport { AstTreeNode } from \"../../..\";\nimport { AstTreeVisualizationData } from \"../../../CommonDataTypes\";\nimport { expect } from \"../../../util\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\n\nexport class TypeScriptAstDataExtractor implements DataExtractor {\n\treadonly id = \"typescript-ast\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector,\n\t\t{ evalFn }: DataExtractorContext\n\t): void {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction getApi(): typeof ts {\n\t\t\tif (typeof data === \"object\" && \"typescript\" in (data as object)) {\n\t\t\t\treturn (data as any).typescript;\n\t\t\t} else {\n\t\t\t\t// This might refer to global.require which uses CWD for resolution!\n\t\t\t\tconst require = evalFn<(request: string) => unknown>(\"require\");\n\t\t\t\treturn require(\"typescript\") as typeof ts;\n\t\t\t}\n\t\t}\n\n\t\tlet tsApi: typeof ts;\n\t\ttry {\n\t\t\ttsApi = getApi();\n\t\t\tif (!tsApi) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst helper = new Helper(tsApi);\n\n\t\tlet rootSourceFile: ts.SourceFile | undefined = undefined;\n\t\tlet rootNode: ts.Node | undefined = undefined;\n\t\tlet marked: Set<ts.Node>;\n\t\tlet fn: (n: ts.Node) => string | undefined = (n: ts.Node) => undefined;\n\t\tif (\n\t\t\tArray.isArray(data) &&\n\t\t\tdata.every(helper.isNode) &&\n\t\t\tdata.length > 0\n\t\t) {\n\t\t\trootSourceFile = helper.getSourceFile(data[0] as ts.Node);\n\t\t\tmarked = new Set(data);\n\t\t} else if (helper.isNode(data)) {\n\t\t\trootSourceFile = helper.getSourceFile(data);\n\t\t\tmarked = new Set([data]);\n\t\t} else if (typeof data === \"object\" && data) {\n\t\t\tmarked = new Set();\n\t\t\tconst map = new Map<ts.Node, string>();\n\t\t\tfn = (n: ts.Node) => map.get(n);\n\t\t\tfor (const [key, item] of Object.entries(data)) {\n\t\t\t\tif (key === \"fn\") {\n\t\t\t\t\tfn = item;\n\t\t\t\t} else if (key === \"typescript\") {\n\t\t\t\t} else {\n\t\t\t\t\tif (key === \"rootNode\") {\n\t\t\t\t\t\trootNode = item;\n\t\t\t\t\t}\n\t\t\t\t\tlet nodes: Array<ts.Node>;\n\t\t\t\t\tif (helper.isNode(item)) {\n\t\t\t\t\t\tnodes = [item];\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tArray.isArray(item) &&\n\t\t\t\t\t\titem.every(helper.isNode)\n\t\t\t\t\t) {\n\t\t\t\t\t\tnodes = item;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (nodes.length > 0 && !rootSourceFile) {\n\t\t\t\t\t\trootSourceFile = helper.getSourceFile(nodes[0]);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const n of nodes) {\n\t\t\t\t\t\tmarked.add(n);\n\t\t\t\t\t\tmap.set(n, key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!rootSourceFile) {\n\t\t\treturn;\n\t\t}\n\t\tconst finalRootSourceFile = rootSourceFile;\n\n\t\tcollector.addExtraction({\n\t\t\tid: \"ts-ast\",\n\t\t\tname: \"TypeScript AST\",\n\t\t\tpriority: 1000,\n\t\t\textractData() {\n\t\t\t\treturn expect<AstTreeVisualizationData>({\n\t\t\t\t\tkind: { text: true, tree: true, ast: true },\n\t\t\t\t\troot: helper.toTreeNode(\n\t\t\t\t\t\trootNode || finalRootSourceFile,\n\t\t\t\t\t\t\"root\",\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tmarked,\n\t\t\t\t\t\tfn\n\t\t\t\t\t),\n\t\t\t\t\ttext: finalRootSourceFile.text,\n\t\t\t\t\tfileName: \"index.ts\",\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n}\n\nclass Helper {\n\tconstructor(private readonly tsApi: typeof ts) {}\n\n\tgetPropertyNameInParent(value: any, parent: any): string | undefined {\n\t\tfor (const propertyName in parent) {\n\t\t\tif (propertyName.startsWith(\"_\")) continue;\n\n\t\t\tconst member = parent[propertyName];\n\t\t\tif (member === value) {\n\t\t\t\treturn propertyName;\n\t\t\t}\n\n\t\t\tif (Array.isArray(member)) {\n\t\t\t\tconst index = member.indexOf(value);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\treturn `${propertyName}[${index}]`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tgetChildren(node: ts.Node): ts.Node[] {\n\t\tconst result = new Array<ts.Node>();\n\t\tthis.tsApi.forEachChild(node, n => {\n\t\t\tresult.push(n);\n\t\t});\n\t\treturn result;\n\t}\n\n\ttoTreeNode(\n\t\tnode: ts.Node,\n\t\tmemberName: string,\n\t\tsegmentName: string,\n\t\tmarked: Set<ts.Node>,\n\t\temphasizedValueFn: (node: ts.Node) => string | undefined\n\t): AstTreeNode {\n\t\tconst name = this.tsApi.SyntaxKind[node.kind];\n\t\tconst children = this.getChildren(node)\n\t\t\t.map((childNode, idx) => {\n\t\t\t\tlet parentPropertyName =\n\t\t\t\t\tthis.getPropertyNameInParent(childNode, node) || \"\";\n\n\t\t\t\tif (childNode.kind == this.tsApi.SyntaxKind.SyntaxList) {\n\t\t\t\t\tconst children = this.getChildren(childNode);\n\t\t\t\t\tfor (const c of children) {\n\t\t\t\t\t\tconst name =\n\t\t\t\t\t\t\tthis.getPropertyNameInParent(c, node) || \"\";\n\t\t\t\t\t\tif (name) {\n\t\t\t\t\t\t\tparentPropertyName = name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet segmentName = \".\" + parentPropertyName;\n\t\t\t\tif (node.kind == this.tsApi.SyntaxKind.SyntaxList) {\n\t\t\t\t\tparentPropertyName = \"\" + idx;\n\t\t\t\t\tsegmentName = `[${idx}]`;\n\t\t\t\t}\n\n\t\t\t\treturn this.toTreeNode(\n\t\t\t\t\tchildNode,\n\t\t\t\t\tparentPropertyName,\n\t\t\t\t\tsegmentName,\n\t\t\t\t\tmarked,\n\t\t\t\t\temphasizedValueFn\n\t\t\t\t);\n\t\t\t})\n\t\t\t.filter(c => c !== null);\n\n\t\tlet value: string | undefined = undefined;\n\n\t\tif (this.tsApi.isIdentifier(node)) {\n\t\t\tvalue = node.text || (node.escapedText as string);\n\t\t} else if (this.tsApi.isLiteralExpression(node)) {\n\t\t\tvalue = node.text;\n\t\t}\n\n\t\tconst items: AstTreeNode[\"items\"] = [\n\t\t\t{ text: `${memberName}: `, emphasis: \"style1\" },\n\t\t\t{ text: name },\n\t\t];\n\n\t\tconst emphasizedVal = emphasizedValueFn(node);\n\t\tif (value) {\n\t\t\titems.push({ text: value, emphasis: \"style2\" });\n\t\t}\n\t\tif (emphasizedVal) {\n\t\t\titems.push({ text: emphasizedVal, emphasis: \"style3\" });\n\t\t}\n\n\t\treturn {\n\t\t\titems,\n\t\t\tchildren: children,\n\t\t\tsegment: segmentName,\n\t\t\tspan: {\n\t\t\t\tlength: node.end - node.pos,\n\t\t\t\tstart: node.pos,\n\t\t\t},\n\t\t\tisMarked: marked.has(node),\n\t\t};\n\t}\n\n\tisNode = (node: unknown): node is ts.Node => {\n\t\treturn (\n\t\t\ttypeof node === \"object\" &&\n\t\t\tnode !== null &&\n\t\t\t(this.tsApi.isToken(node as any) ||\n\t\t\t\t(this.tsApi as any).isNode(node))\n\t\t);\n\t};\n\n\tgetSourceFile(node: ts.Node | any): ts.SourceFile {\n\t\tif (!node) {\n\t\t\tthrow new Error(\"Detached node\");\n\t\t}\n\t\tif (this.tsApi.isSourceFile(node)) {\n\t\t\treturn node;\n\t\t}\n\t\tif (!(\"getSourceFile\" in node)) {\n\t\t\treturn this.getSourceFile(node.parent);\n\t\t}\n\t\treturn node.getSourceFile();\n\t}\n}\n","import { isVisualizationData } from \"../../../DataExtractionResult\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../..\";\n\nexport class AsIsDataExtractor implements DataExtractor {\n\treadonly id = \"as-is\";\n\tgetExtractions(\n\t\tdata: unknown,\n\t\textractionCollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (!isVisualizationData(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\textractionCollector.addExtraction({\n\t\t\tid: this.id,\n\t\t\tname: \"As Is\",\n\t\t\tpriority: 500,\n\t\t\textractData() {\n\t\t\t\treturn data;\n\t\t\t},\n\t\t});\n\t}\n}\n","import { VisualizationData } from \"../../../DataExtractionResult\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\n\nexport class GetVisualizationDataExtractor implements DataExtractor {\n\treadonly id = \"get-visualization-data\";\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (typeof data !== \"object\" || !data) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst getVisualizationData = (data as any)\n\t\t\t.getVisualizationData as Function;\n\t\tif (typeof getVisualizationData !== \"function\") {\n\t\t\treturn;\n\t\t}\n\n\t\tcollector.addExtraction({\n\t\t\tid: this.id,\n\t\t\tname: \"Use Method 'getVisualizationData'\",\n\t\t\tpriority: 600,\n\t\t\textractData() {\n\t\t\t\treturn getVisualizationData.apply(data);\n\t\t\t},\n\t\t});\n\t}\n}\n","import { MonacoTextVisualizationData } from \"../../../CommonDataTypes\";\nimport { expect } from \"../../../util\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\n\nexport class ToStringDataExtractor implements DataExtractor {\n\treadonly id = \"to-string\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tcollector.addExtraction({\n\t\t\tid: \"to-string\",\n\t\t\tname: \"To String\",\n\t\t\tpriority: 100,\n\t\t\textractData() {\n\t\t\t\treturn expect<MonacoTextVisualizationData>({\n\t\t\t\t\tkind: {\n\t\t\t\t\t\ttext: true,\n\t\t\t\t\t},\n\t\t\t\t\ttext: \"\" + data,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n}\n","import { PlotlyVisualizationData } from \"../../../CommonDataTypes\";\nimport { expect } from \"../../../util\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\n\nexport class PlotlyDataExtractor implements DataExtractor {\n\treadonly id = \"plot\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (!Array.isArray(data)) {\n\t\t\treturn;\n\t\t}\n\t\tif (data.some(x => typeof x !== \"number\")) {\n\t\t\treturn;\n\t\t}\n\n\t\tcollector.addExtraction({\n\t\t\tid: \"plot-y\",\n\t\t\tname: \"Plot as y-Values\",\n\t\t\tpriority: 1001,\n\t\t\textractData: () =>\n\t\t\t\texpect<PlotlyVisualizationData>({\n\t\t\t\t\tkind: {\n\t\t\t\t\t\tplotly: true,\n\t\t\t\t\t},\n\t\t\t\t\tdata: [{ y: data }],\n\t\t\t\t}),\n\t\t});\n\t}\n}\n","import { VisualizationData } from \"../../../DataExtractionResult\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\nimport { createGraph, CreateGraphEdge } from \"../../helpers\";\n\nexport class ObjectGraphExtractor implements DataExtractor {\n\treadonly id = \"object-graph\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tfunction isObject(val: unknown): val is object {\n\t\t\tif (typeof val !== \"object\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!val) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tif (!isObject(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\tcollector.addExtraction({\n\t\t\tid: \"object-graph\",\n\t\t\tname: \"Object Graph\",\n\t\t\tpriority: 99,\n\t\t\textractData() {\n\t\t\t\treturn createGraph(\n\t\t\t\t\t[data],\n\t\t\t\t\titem => {\n\t\t\t\t\t\tlet label = \"\";\n\t\t\t\t\t\tconst edges = new Array<CreateGraphEdge<any>>();\n\t\t\t\t\t\tif (item instanceof Set) {\n\t\t\t\t\t\t\tlabel = \"Set\";\n\t\t\t\t\t\t\tfor (const value of item.values()) {\n\t\t\t\t\t\t\t\tif (isObject(value)) {\n\t\t\t\t\t\t\t\t\tedges.push({ label: \"item\", to: value });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (item instanceof Map) {\n\t\t\t\t\t\t\tlabel = \"Map\";\n\t\t\t\t\t\t\tfor (const [key, value] of item.entries()) {\n\t\t\t\t\t\t\t\tif (isObject(value)) {\n\t\t\t\t\t\t\t\t\tedges.push({ label: key, to: value });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (const [key, val] of Object.entries(item)) {\n\t\t\t\t\t\t\t\tif (isObject(val)) {\n\t\t\t\t\t\t\t\t\tedges.push({ label: key, to: val });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst className = item.constructor\n\t\t\t\t\t\t\t\t? item.constructor.name\n\t\t\t\t\t\t\t\t: \"?\";\n\t\t\t\t\t\t\tlabel = className;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tshape: \"box\",\n\t\t\t\t\t\t\tedges,\n\t\t\t\t\t\t\tcolor: item === data ? \"lightblue\" : undefined,\n\t\t\t\t\t\t\tlabel,\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\t{ maxSize: 50 }\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\t}\n}\n","import { GraphNode, GraphVisualizationData } from \"../../CommonDataTypes\";\nimport { CreateGraphEdge, createGraph } from \"./createGraph\";\n\n/**\n * Given a labeled list of roots, it creates a graph by following their edges recursively.\n * Tracks cycles.\n */\nexport function createGraphFromPointers<T>(\n\troots: Record<string, T | undefined | null>,\n\tinfoSelector: (\n\t\titem: T\n\t) => {\n\t\tid?: string | number;\n\t\tedges: CreateGraphEdge<T>[];\n\t} & Omit<GraphNode, \"id\">\n): GraphVisualizationData {\n\tconst marker = {};\n\n\tinterface Pointer {\n\t\tmarker: {};\n\t\tname: string;\n\t\tvalue: T | null | undefined;\n\t}\n\n\tconst items = Object.entries(roots).map<Pointer>(([name, value]) => ({\n\t\tmarker,\n\t\tname,\n\t\tvalue,\n\t}));\n\n\treturn createGraph<T | Pointer>(items, item => {\n\t\tif (\"marker\" in item && item[\"marker\"] === marker) {\n\t\t\treturn {\n\t\t\t\tid: \"label____\" + item.name,\n\t\t\t\tcolor: \"orange\",\n\t\t\t\tlabel: item.name,\n\t\t\t\tedges: [{ to: item.value!, color: \"orange\", label: \"\" }].filter(\n\t\t\t\t\tt => !!t.to\n\t\t\t\t),\n\t\t\t};\n\t\t} else {\n\t\t\treturn infoSelector(item as T);\n\t\t}\n\t});\n}\n","import { DataExtractorApiImpl } from \"../api/DataExtractorApiImpl\";\n\n/**\n * Takes an object and eval's its values.\n * Each successfully evaluated value is added to the result object,\n * its original key is used as key in the result object.\n *\n * # Example\n * ```\n * const x = 1;\n * tryEval({ val1: \"x\", val2: \"x y\" })\n * // -> { val1: 1 }\n * ```\n */\nexport function tryEval(obj: Record<string, string>): Record<string, unknown>;\n/**\n * Takes an array of strings and eval's its items.\n * Each successfully evaluated value is added to the result object,\n * its original value is used as key.\n *\n * # Example\n * ```\n * const x = 1;\n * tryEval([\"x\", \"y\", \"a a\", \"x + 2\"])\n * // -> { x: 1, \"x + 2\": 3 }\n * ```\n */\nexport function tryEval(arr: string[]): Record<string, unknown>;\nexport function tryEval(\n\tobj: Record<string, string> | string[] | string\n): Record<string, unknown> | unknown {\n\tconst result: Record<string, unknown> = {};\n\tconst evalFn = DataExtractorApiImpl.lastEvalFn!;\n\tif (Array.isArray(obj)) {\n\t\tfor (const val of obj) {\n\t\t\ttry {\n\t\t\t\tresult[val] = evalFn(val);\n\t\t\t} catch (e) {}\n\t\t}\n\t} else {\n\t\tfor (const [key, val] of Object.entries(obj)) {\n\t\t\ttry {\n\t\t\t\tresult[key] = evalFn(val);\n\t\t\t} catch (e) {}\n\t\t}\n\t}\n\treturn result;\n}\n","import { GridVisualizationData } from \"../../CommonDataTypes\";\n\nexport function markedGrid(\n\tarr: unknown[],\n\tmarked: Record<string, number | undefined>\n): GridVisualizationData {\n\treturn {\n\t\tkind: { grid: true },\n\t\trows: [{ columns: arr.map(d => ({ content: \"\" + d, tag: \"\" + d })) }],\n\t\tmarkers: Object.entries(marked)\n\t\t\t.map(([key, val]) => ({\n\t\t\t\tid: \"\" + key,\n\t\t\t\trow: 0,\n\t\t\t\tcolumn: val!,\n\t\t\t}))\n\t\t\t.filter(c => c.column !== undefined),\n\t};\n}\n","import { DataExtractorApiImpl } from \"../api\";\n\nconst cached = new Map<string, any>();\n\n/**\n * Evaluates an expression\n */\nexport function cache<T>(\n\texpression: string | (() => T),\n\tid: string | number | undefined = undefined\n): T {\n\tlet resultFn: () => any;\n\tlet key: string;\n\tif (typeof expression === \"string\") {\n\t\tconst evalFn = DataExtractorApiImpl.lastEvalFn!;\n\t\tresultFn = () => evalFn(expression);\n\t\tkey = JSON.stringify({ expr: expression, id });\n\t} else {\n\t\tresultFn = () => expression();\n\t\tkey = JSON.stringify({ expr: expression.toString(), id });\n\t}\n\n\tif (cached.has(key)) {\n\t\treturn cached.get(key);\n\t}\n\n\tconst result = resultFn();\n\tcached.set(key, result);\n\n\treturn result;\n}\n","import { KnownVisualizationData } from \"../../CommonDataTypes\";\nimport { VisualizationData } from \"../../DataExtractionResult\";\n\nexport function asData(data: KnownVisualizationData): VisualizationData {\n\treturn data;\n}\n","import { DataExtractorApiImpl } from \"../api\";\r\n\r\nexport function find(predicate: (obj: unknown) => boolean): unknown {\r\n\tconst processed = new Set();\r\n\tif (!DataExtractorApiImpl.lastVariablesInScope) {\r\n\t\tthrow new Error(\"No variables in scope!\");\r\n\t}\r\n\r\n\tconst values = Object.values(DataExtractorApiImpl.lastVariablesInScope);\r\n\tconst queue = [...values];\r\n\r\n\tlet i = 10000;\r\n\twhile (i > 0) {\r\n\t\ti--;\r\n\r\n\t\tconst top = queue.shift();\r\n\t\tprocessed.add(top);\r\n\r\n\t\tif (predicate(top)) {\r\n\t\t\treturn top;\r\n\t\t}\r\n\r\n\t\tif (typeof top === \"object\" && top) {\r\n\t\t\tfor (const val of Object.values(top)) {\r\n\t\t\t\tif (!processed.has(val)) {\r\n\t\t\t\t\tprocessed.add(val);\r\n\t\t\t\t\tqueue.push(val);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn undefined;\r\n}\r\n","import {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../..\";\nimport { GridVisualizationData } from \"../../../CommonDataTypes\";\nimport { expect } from \"../../../util\";\n\nexport class GridExtractor implements DataExtractor {\n\treadonly id = \"grid\";\n\tgetExtractions(\n\t\tdata: unknown,\n\t\textractionCollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (!Array.isArray(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\textractionCollector.addExtraction({\n\t\t\tid: this.id,\n\t\t\tname: \"Array As Grid\",\n\t\t\tpriority: 500,\n\t\t\textractData: () =>\n\t\t\t\texpect<GridVisualizationData>({\n\t\t\t\t\tkind: { grid: true },\n\t\t\t\t\trows: [{ columns: data.map(d => ({ tag: \"\" + d })) }],\n\t\t\t\t}),\n\t\t});\n\t}\n}\n","import { isAssertionExpression } from \"typescript\";\nimport { DataExtractor, ExtractionCollector, DataExtractorContext } from \"..\";\nimport { TableVisualizationData } from \"../../../CommonDataTypes\";\nimport { expect } from \"../../../util\";\n\nfunction assert<T>(value: unknown): asserts value {}\n\nexport class TableDataExtractor implements DataExtractor {\n\treadonly id = \"table\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (!Array.isArray(data)) {\n\t\t\treturn;\n\t\t}\n\t\tif (!data.every(d => typeof d === \"object\" && d)) {\n\t\t\treturn;\n\t\t}\n\t\tassert<object[]>(data);\n\n\t\tcollector.addExtraction({\n\t\t\tid: \"table\",\n\t\t\tname: \"Table\",\n\t\t\tpriority: 1000,\n\t\t\textractData() {\n\t\t\t\treturn expect<TableVisualizationData>({\n\t\t\t\t\tkind: {\n\t\t\t\t\t\ttable: true,\n\t\t\t\t\t},\n\t\t\t\t\trows: data,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\n\t\tcollector.addExtraction({\n\t\t\tid: \"table-with-type-name\",\n\t\t\tname: \"Table (With Type Name)\",\n\t\t\tpriority: 950,\n\t\t\textractData() {\n\t\t\t\treturn expect<TableVisualizationData>({\n\t\t\t\t\tkind: {\n\t\t\t\t\t\ttable: true,\n\t\t\t\t\t},\n\t\t\t\t\trows: data.map(d => ({ type: d.constructor.name, ...d })),\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n}\n","import { DataExtractor, DataExtractorContext, ExtractionCollector } from \"../..\";\r\n\r\nexport class StringDiffExtractor implements DataExtractor {\r\n    public readonly id = \"string-diff\";\r\n\r\n    public getExtractions(data: unknown,\r\n\t\tcollector: ExtractionCollector,\r\n\t\tcontext: DataExtractorContext) {\r\n        if (Array.isArray(data) && data.length === 2 && typeof data[0] === \"string\" && typeof data[1] === \"string\") {\r\n            collector.addExtraction({\r\n                id: \"string-diff\",\r\n                name: \"String Diff\",\r\n                priority: 1000,\r\n                extractData: () => ({\r\n                    kind: { text: true },\r\n                    text: data[0],\r\n                    otherText: data[1]\r\n                })\r\n            })\r\n        }\r\n    }\r\n}","import {\r\n\tDataExtractor,\r\n\tExtractionCollector,\r\n\tDataExtractorContext,\r\n\tLoadDataExtractorsFn,\r\n} from \"..\";\r\nimport * as helpers from \"../../helpers\";\r\n\r\nexport class InjectedExtractor implements DataExtractor {\r\n\treadonly id = \"injected-extractor\";\r\n\r\n\tgetExtractions(\r\n\t\tdata: unknown,\r\n\t\textractionCollector: ExtractionCollector,\r\n\t\tcontext: DataExtractorContext\r\n\t): void {\r\n\t\tconst key = \"@hediet/debug-visualizer/injectedScripts\";\r\n\t\tconst injectedExtractorsFns = Object.values(\r\n\t\t\t(global as any)[key]\r\n\t\t) as LoadDataExtractorsFn[];\r\n\r\n\t\tconst extractors = new Array<DataExtractor>();\r\n\r\n\t\tfor (const fn of injectedExtractorsFns) {\r\n\t\t\tfn(extractor => {\r\n\t\t\t\textractors.push(extractor);\r\n\t\t\t}, helpers);\r\n\t\t}\r\n\r\n\t\tfor (const extractor of extractors) {\r\n\t\t\textractor.getExtractions(data, extractionCollector, context);\r\n\t\t}\r\n\t}\r\n}\r\n","export { getDataExtractorApi as getApi } from \"./api/injection\";\n","module.exports = require(\"fs\");"],"sourceRoot":""}